#!/bin/bash
# set variables 
declare -r TRUE=0
declare -r FALSE=1
declare -r PASSWD_FILE=/etc/passwd
 
# purpose: converts a string to lower case
# arguments:
#   $1 -> string to convert to lower case
function to_lower() 
{
    local str="$@"
    local output     
    output=$(tr '[A-Z]' '[a-z]'<<<"${str}")
    echo $output
}

# purpose: to display an error message and die
# arguments:
#   $1 -> message
#   $2 -> exit status (optional)
function die() 
{
    local m=$1 	   # message
    local e=${2-1}	# default exit status 1
    printf "$m"
    exit $e
}

# purpose: return true if script is executed by the root user
# arguments: none
# return: true or die with message
function is_root() 
{
   [ $(id -u) -eq 0 ] && return $TRUE || return $FALSE
#   [ "$(id -u)" != "0" ]
}
 
# purpose: return true $user exits in /etc/passwd
# arguments:
#   $1 -> username to check in /etc/passwd
# return: true or false
function user_exists()
{
   local u="$1"
   # -q (quiet), -w (only match whole words, otherwise "user" would match "user1" and "user2")
   if grep -qw "^${u}" $PASSWD_FILE; then
      echo "user $u exists in /etc/passwd"
      return $TRUE
   else
      echo "user $u does not exists in /etc/passwd"
      return $FALSE
   fi
}

# purpose: trim shortest pattern from the left
# arguments:
#   $1 -> variable
#   $2 -> pattern
function trim_shortest_left_pattern()
{
   echo -n "${1#*$2}"
   # -n (don't create newline character)
}

# purpose: trim longest pattern from the left
# arguments:
#   $1 -> variable
#   $2 -> pattern
function trim_longest_left_pattern()
{
   echo -n "${1##*$2}"
}

# purpose: trim shortest pattern from the right
# arguments:
#   $1 -> variable
#   $2 -> pattern
function trim_shortest_right_pattern()
{
   echo -n "${1%$2*}"
}

# purpose: trim longest pattern from the right
# arguments:
#   $1 -> variable
#   $2 -> pattern
function trim_longest_right_pattern()
{
   echo -n "${1%%$2*}"
}

# purpose: return name of script being run
# arguments:
#   $1 -> message before
#   $2 -> message after
function script_name()
{
#   echo "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

   # can be accomplished with trim_longest_left_pattern instead
   echo -n "$1" && trim_longest_left_pattern $0 / && echo "$2"
}

# purpose: download and extract software
# arguments:
#   $1 -> list of URLs to software
function get_software()
{
   local list="$1"
   local filename

   echo
   for url in ${list}; do
      filename=$(trim_longest_left_pattern $url /)
      read -p "Press enter to download and extract: $filename"
      wget -nc $url
      tar -xzf $filename
   done
}

# purpose: run a script from another script
# arguments:
#   $1 -> name of script to be run
function run_script()
{
   local script="$1"
   local project_dir="$PWD"
   # reset back to root poject directory to run scripts
   cd "$project_dir/scripts"
   echo "changing directory to $_"
   # make sure dos2unix is installed
   hash dos2unix 2>/dev/null || { echo >&2 "dos2unix will be installed."; yum -y install dos2unix; }
   dos2unix -k ${script} && echo "carriage returns removed"
   chmod +x ${script} && echo "execute permissions set"
   chown $(logname):$(logname) ${script} && echo "owner set to $(logname)"
   read -p "Press enter to run: ${script}"
   . ./${script}
   echo
   echo "          done with ${script}"
   echo "*********************************************"
   cd "$project_dir"
}

# purpose: set Repos directory location
# arguments:
#   $1 -> non-root Linux username
#   $2 -> use Dropbox?
function locate_repos()
{
   local u="$1"
   local db=$2
   local repos

   if $db; then
      repos="/home/${u}/Dropbox/Repos"
      # if dropbox directory is made, set ownership
      [ mkdir -p "/home/${u}/Dropbox" ] && chown $u:$u "/home/${u}/Dropbox"
   else
      repos="/home/${u}/Repos"
   fi

   # if repos directory is made, set ownership
   [ mkdir -p "$repos" ] && chown $u:$u "$repos"
   echo -n $repos
}

# purpose: generate an RSA SSH keypair if none exists or copy from root
# arguments:
#   $1 -> SSH directory
#   $2 -> SSH key comment
#   $3 -> non-root Linux username (optional)
function gen_ssh_keys()
{
   local ssh_dir="$1"
   local comment="$2"
   local u="$3"

   # move id_rsa to new user account or create new SSH keypair if none exists
   echo
   read -p "Press enter to continue to SSH keys..."
   echo
   echo "Note: ${ssh_dir}/id_rsa is for public/private key pairs to establish"
   echo "outgoing SSH connections to remote systems"
   echo

   # check if id_rsa already exists and skip if true
   if [ -e "${ssh_dir}/id_rsa" ]; then
      echo "${ssh_dir}/id_rsa already exists"
   # if it doesn't exist, get it from root user
   elif $([ -e "$HOME/.ssh/id_rsa" ]) && $([ "${u}" != "" ]); then
      cp $HOME/.ssh/id_rsa ${ssh_dir}
      cp $HOME/.ssh/id_rsa.pub ${ssh_dir}
      echo "copied $HOME/.ssh/id_rsa to ${ssh_dir}/id_rsa"
      chmod 0600 "${ssh_dir}/id_rsa"
      echo "set 0600 permissions on ${ssh_dir}/id_rsa"
      chown -R "${u}":"${u}" "${ssh_dir}/id_rsa"
      echo "set owner and group to ${u} for ${ssh_dir}/id_rsa"
   # if no id_rsa, create a new keypair
   else
      # create a new ssh key with provided ssh key comment
      echo "create new key: ${ssh_dir}/id_rsa"
      read -p "Press enter to generate a new SSH key"
      ssh-keygen -b 4096 -t rsa -C "${comment}"
      echo "SSH key generated"
      echo
      echo "***IMPORTANT***"
      echo "Copy the contents of id_rsa.pub (printed below) to the SSH keys section"
      echo "of your GitHub account or authorized_keys section of your remote server."
      echo "Highlight the text with your mouse and press ctrl+shift+c to copy."
      echo
      cat "${ssh_dir}/id_rsa.pub"
      echo
      read -p "Press enter to continue..."
   fi
}

# purpose: set authorized SSH keys for incoming connections on remote host
# arguments:
#   $1 -> SSH directory
#   $2 -> non-root Linux username
function authorized_ssh_keys()
{
   local ssh_dir="$1"
   local u="$2"
   local ssh_rsa

   echo
   echo "Note: ${ssh_dir}/authorized_keys are public keys to establish"
   echo "incoming SSH connections to this server"
   echo
   if [ -e "${ssh_dir}/authorized_keys" ]; then
      echo "${ssh_dir}/authorized_keys already exists for ${u}"
   else
      passwd "${u}"
      echo
      echo "for su root command:"
      passwd root # for su root command
      mkdir -pv "${ssh_dir}"
      chmod 0700 "${ssh_dir}"
      echo "set 0700 permissons on .ssh directory"
      echo
      echo "***IMPORTANT***"
      echo "Paste (using ctrl+shift+v) your public ssh-rsa key from your workstation"
      echo "to SSH into this server."
      read -e -p "Paste it here: " ssh_rsa
      echo "${ssh_rsa}" > "${ssh_dir}/authorized_keys"
      echo "public SSH key saved to ${ssh_dir}/authorized_keys"
      chmod 0600 "${ssh_dir}/authorized_keys"
      echo "set 0600 permissions on ${ssh_dir}/authorized_keys"
      chown -R "${u}":"${u}" "${ssh_dir}"
      echo "set owner and group to ${u} for ${ssh_dir}"
   fi
}

# purpose: import public GPG key if it doesn't already exist in list of RPM keys
#          although rpm --import won't import duplicate keys, this is a proof of concept
# arguments:
#   $1 -> URL of the public key file
# return: false if URL is empty, else true
function get_public_key()
{
   local url="$1"
   local rpm_keys="$HOME/rpm_keys"

   [ -z "${url}" ] && return $FALSE
   read -p "Press enter to download and import the RPM GPG Key..."
   mkdir -pv "$rpm_keys"
   cd "$rpm_keys"
   echo "changing directory to $_"
   # download keyfile
   wget -nc "$url"
   local key_file=$(trim_longest_left_pattern "${url}" /)
   # get key id
   local key_id=$(echo $(gpg --throw-keyids < "$key_file") | cut --characters=11-18 | tr [A-Z] [a-z])
   # import key if it doesn't exist
   if ! rpm -q "gpg-pubkey-$key_id" > /dev/null 2>&1; then
      echo "Installing GPG public key with ID $key_id from $key_file..."
      rpm --import "$key_file"
   fi
   # change directory back to previous one
   cd -
   return $TRUE
}

# purpose: to install a CentOS repository like EPEL, REMI, RPMforge
# arguments:
#   $1 -> repository name
#   $2 -> URL for the RPM
#   $3 -> URL for the RPM GPG key (optional)
function install_repo()
{
   local repo_name="$1"
   local rpm_url="$2"
   local gpg_key="$3"
   local use_gpg=1

   echo
   read -p "Press enter to check if ${repo_name} is installed..."
   if rpm -qa | grep -qw "${repo_name}"
   then
      echo "${repo_name} is already installed"
   else
      # import rpm key
      get_public_key "${gpg_key}"
      use_gpg=$? #assign return value to variable
      if [ "$use_gpg" == "0" ]; then
         # list imported gpg keys
         rpm -qa gpg*
      fi
      # test the rpm install
      #echo
      #read -p "Press enter to test install the repository..."
      #rpm -Uvh --test "${rpm_url}"
      # run the install
      echo
      read -p "Press enter to continue with ${repo_name} install..."
      rpm -Uvh "${rpm_url}"
      # test new repo
      echo
      read -p "Press enter to test the new repo..."
      yum check-update
   fi
}

# purpose: to install programs from a list
# arguments:
#   $1 -> program list (space-separated)
#   $2 -> enable-repo (optional)
function install_app()
{
   local list="$1"
   local repo="$2"
   # install applications in the list
   for app in $list; do
      if rpm -qa | grep -qw "$app"; then
         echo "$app is already installed"
      else
         echo
         read -p "Press enter to install $app..."
         [ -v "${repo}" ] && yum -y install "$app" || yum --enablerepo="${repo}" -y install "$app"
      fi
   done
}

# purpose: to install gems from a list
# arguments:
#   $1 -> gem list (space-separated)
function install_gem()
{
   local list="$1"
   # install gems in the list
   for app in $list; do
      if $(gem list "$app" -i); then
         echo "gem $app is already installed"
      else
         echo
         read -p "Press enter to install $app..."
         gem install "$app"
      fi
   done
}

# purpose: to source the rvm command
# arguments: none
function source_rvm()
{
   echo
   read -p "Press enter to start using rvm..."
   if grep -q "/usr/local/rvm/scripts/rvm" $HOME/.bashrc; then
      echo "already added rvm to .bashrc"
   else
      echo "source /usr/local/rvm/scripts/rvm" >> $HOME/.bashrc
      source /usr/local/rvm/scripts/rvm && echo "rvm sourced and added to .bashrc"
   fi
}
