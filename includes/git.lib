#!/bin/bash
# --------------------------------------------
# A library of useful git functions
#
# Author : Keegan Mullaney
# Company: KM Authorized LLC
# Website: http://kmauthorized.com
#
# MIT: http://kma.mit-license.org
# --------------------------------------------

# set variables 
declare -r TRUE=0
declare -r FALSE=1
 
# purpose: to set global git defaults
# arguments:
#   $1 -> code author's name
#   $2 -> code author's email
function configure_git()
{
   local name="$1"
   local email="$2"
   local ignore="$HOME/.gitignore_global"

   if git config --list | grep -q "${name}"; then
      echo "git is already configured."
   else
      echo
      read -p "Press enter to configure git..."
      # specify a user
      git config --global user.name "${name}"
      git config --global user.email "${email}"
      # select a text editor
      git config --global core.editor vi
      # set default push and pull behavior to the old method
      git config --global push.default matching
      git config --global pull.default matching
      # create a global .gitignore file
      echo "# global list of file types to ignore
# from https://gist.githubusercontent.com/octocat/9257657/raw/c91b435be351fcdff00f6f97f20824d0286b99ef/.gitignore

# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db" > "${ignore}"
      git config --global core.excludesfile "${ignore}"
      echo "git was configured"
      echo
      read -p "Press enter to view the config..."
      git config --list
   fi
}

# purpose: clone repository after fork
# arguments:
#   $1 -> GitHub username
#   $2 -> name of upstream repository
#   $3 -> location of Repos directory
#   $4 -> use SSH protocal for git operations? (optional)
function clone_repo()
{
   local github_user="$1"
   local address="${github_user}/$2.git"
   local repos_dir="$3"
   local use_ssh=$4

   [ "${use_ssh}" == "" ] && use_ssh=false

   if [ -d "${repos_dir}/${2}" ]; then
      echo
      echo "${2} directory already exists, skipping clone operation..."
   else
      echo
      echo "*** NOTE ***"
      echo "Make sure \"github.com/${address}\" exists."
      read -p "Press enter to clone ${address} at GitHub..."
      if $use_ssh; then
         git clone "git@github.com:${address}"
      else
         git clone "https://github.com/${address}"
      fi
   fi

   # change to newly cloned directory
   cd "${2}"
   echo "changing directory to $_"
}

# purpose: set remote origin, if not set yet
# arguments:
#   $1 -> GitHub username
#   $2 -> name of origin repository
#   $3 -> set remote upstream or origin (true for upstream)
#   $4 -> use SSH protocal for git operations? (optional)
# return: true or false
function set_remote_repo()
{
   local github_user="$1"
   local address="${github_user}/$2.git"
   local set_upstream=$3
   local use_ssh=$4

   [ "${use_ssh}" == "" ] && use_ssh=false
   
   if $set_upstream && [ "${github_user}" == "keegoid" ]; then
      echo
      echo "upstream doesn't exist for $github_user, skipping..."
      return $FALSE
   fi

   if git config --list | grep -q "${address}"; then
      echo
      echo "remote repo already configured: ${address}"
   else
      echo
      if $set_upstream; then
         read -p "Press enter to assign upstream repository..."
         if $use_ssh; then
            git remote add upstream "git@github.com:${address}" && echo "remote upstream added: git@github.com:${address}"
         else
            git remote add upstream "https://github.com/${address}" && echo "remote upstream added: https://github.com/${address}"
         fi
      else
         echo "*** NOTE ***"
         echo "Make sure \"github.com/${address}\" exists."
         echo "Either fork and rename it, or create a new repository in your GitHub."
         read -p "Press enter to assign remote origin repository..."
         if $use_ssh; then
            git remote add origin "git@github.com:${address}" && echo "remote origin added: git@github.com:${address}"
         else
            git remote add origin "https://github.com/${address}" && echo "remote origin added: https://github.com/${address}"
         fi
      fi
   fi
   return $TRUE
}

# purpose: create a branch for custom changes so master can receive upstream updates
#          upstream changes can then be merged with the branch interactively
# arguments:
#   $1 -> branch name
function create_branch()
{
   local branch_name="$1"
   
   echo
   read -p "Press enter to create a git branch for your site at ${branch_name}..."
   git checkout -b "${branch_name}"

   # some work and some commits happen
   # some time passes
   #git fetch upstream
   #git rebase upstream/master or git rebase interactive upstream/master

   echo
   read -p "Press enter to push changes and set branch origin in config..."
   git push -u origin "${branch_name}"

   echo
   read -p "Press enter to checkout the master branch again..."
   git checkout master

   # above could also be done with:
   # git branch "${branch_name}"
   # git push origin "${branch_name}"
   # git branch -u "origin/${branch_name}" "${branch_name}"

   echo
   echo "*************************************************************************"
   echo "* - use ${branch_name} branch to make your own site                      "
   echo "* - use master branch to keep up with changes from the upstream repo     "
   echo "*************************************************************************"
}

# purpose: commit changes with git
# arguments: none
# return: true or false
#function git_status()
#{
#   local commit=$FALSE

   # print git status
#   echo
#   read -p "Press enter to view git status..."
#   git status

   # commit changes with git
#   if git status | egrep -qw "Changes not staged for commit|Changes to be committed"; then
#      echo
#      echo "*** NOTE ***"
#      read -p "Enter a commit message and press enter to commit changes: " msg
#      git commit -am "$msg"
#      commit=$TRUE
#   else
#      echo "skipping commit..."
#   fi
   
#   return $commit
#}

# purpose: add remote upstream repository, fetch and merge changes
# arguments: none
function merge_upstream()
{
   # pull in changes not present in local repository, without modifying local files
   echo
   read -p "Press enter to fetch changes from upstream repository..."
   git fetch upstream && echo "upstream fetch done"

   # merge any changes fetched into local working files
   echo
   echo "*** NOTE ***"
   echo "If merging changes, press \":wq enter\" to accept the merge message in vi."
   read -p "Press enter to merge changes..."
   git merge upstream/master

   # or combine fetch and merge with:
   #git pull upstream master
}

# purpose: commit and push changes with git
# arguments: none
#function commit_and_push()
#{
#   local commit=$FALSE

#   commit=$(git_status)

#   echo "commit = $commit"

   # push commits to your remote repository
#   if $commit || git status | grep -qw "Your branch is ahead of"; then
#      echo
#      read -p "Press enter to push changes to your remote repository (GitHub)..."
#      git push origin master
#   else
#      echo "nothing to push, skipping push..."
#   fi
#}

