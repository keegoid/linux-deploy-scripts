#!/bin/bash
 
# purpose: to set global git defaults
# arguments:
#   $1 -> code author's name
#   $2 -> code author's email
function configure_git()
{
   local GIT_IGNORE="$HOME/.gitignore_global"

   if git config --list | grep -q $GIT_IGNORE; then
      echo "git was already configured."
   else
      echo
      read -p "Press enter to configure git..."
      # specify a user
      git config --global user.name "$1"
      git config --global user.email "$2"
      # select a text editor
      git config --global core.editor vi
      # add some SVN-like aliases
      git config --global alias.st status
      git config --global alias.co checkout
      git config --global alias.br branch
      git config --global alias.up rebase
      git config --global alias.ci commit
      # set default push and pull behavior to the old method
      git config --global push.default matching
      git config --global pull.default matching
      # create a global .gitignore file
      echo -e "# global list of file types to ignore \
\n# \
\n# text editor temp files \
\n*~ \
\n.DS_Store" > $GIT_IGNORE
      git config --global core.excludesfile $GIT_IGNORE
      echo "git was configured"
   fi
}

# purpose: clone repository after fork
# arguments:
#   $1 -> address of upstream repository
#   $2 -> use SSH protocal for git operations?
#   $3 -> location of Repos directory
#   $4 -> GitHub username
function clone_repo()
{
   local UPSTREAM_REPO="keegoid/$1.git"

   if [ -d "$3/$1" ]; then
      echo "$1 directory already exists, skipping clone operation..."
   else
      echo
      echo "***IMPORTANT***"
      echo "Before proceeding, make sure to fork $UPSTREAM_REPO"
      echo
      read -p "Press enter to clone $1 from your GitHub account..."
      if $2; then
         git clone git@github.com:$4/$1.git
      else
         git clone https://github.com/$4/$1.git
      fi
   fi

   # change to newly cloned directory
   cd $1
   echo "changing directory to $_"
}

# purpose: add remote upstream repository, fetch and merge changes
# arguments:
#   $1 -> address of upstream repository
#   $2 -> use SSH protocal for git operations?
function merge_upstream_repo()
{
   local UPSTREAM_REPO="keegoid/$1.git"

   if git config --list | grep -q $UPSTREAM_REPO; then
      echo "upstream repo already configured: https://github.com/$UPSTREAM_REPO"
   else
      echo
      read -p "Press enter to assign upstream repository..."
      if $2; then
         git remote add upstream git@github.com:$UPSTREAM_REPO && echo "remote upstream added for git@github.com:$UPSTREAM_REPO"
      else
         git remote add upstream https://github.com/$UPSTREAM_REPO && echo "remote upstream added for https://github.com/$UPSTREAM_REPO"
      fi

      # pull in changes not present in local repository, without modifying local files
      echo
      read -p "Press enter to fetch changes from upstream repository..."
      git fetch upstream
      echo "upstream fetch done"

      # merge any changes fetched into local working files
      echo
      read -p "Press enter to merge changes..."
      git merge upstream/master

      # or combine fetch and merge with:
      #git pull upstream master
   fi
}

# purpose: create a branch for custom changes so master can receive upstream updates
#          upstream changes can then be merged with the branch interactively
# arguments:
#   $1 -> Middleman domain name
function create_branch()
{
   echo
   read -p "Press enter to create a git branch for your site at $1..."
   git checkout -b $1

   # some work and some commits happen
   # some time passes
   #git fetch upstream
   #git rebase upstream/master or git rebase interactive upstream/master

   read -p "Press enter to push changes and set branch upstream in config..."
   git push -u origin $1

   read -p "Press enter to checkout the master branch again..."
   git checkout master

   echo
   echo "above could also be done with:"
   echo "git branch $1"
   echo "git push origin $1"
   echo "git branch -u origin/$1 $1"

   echo
   echo "*************************************************************************"
   echo "* - use $1 branch to make your own site                                  "
   echo "* - use master branch to keep up with changes from the upstream repo     "
   echo "*************************************************************************"
}

# purpose: commit and push changes with git
# arguments:
#   $1 -> GitHub username
function commit_and_push()
{
   # print git status
   read -p "Press enter to view git status..."
   STATUS=$(git status)

   if cat $STATUS | grep -q 'nothing to commit, working directory clean'; then
      echo "skipping commit..."
   else
      # commit changes with git
      read -p "Press enter to commit changes..."
      git commit -am "first commit by $1"

      # push commits to your remote repository
      read -p "Press enter to push changes to your remote repository (GitHub)..."
      git push origin master
   fi
}
