#!/bin/bash
 
# purpose: to set global git defaults
# arguments:
#   $1 -> code author's name
#   $2 -> code author's email
function configure_git()
{
   local name="$1"
   local email="$2"
   local ignore="$HOME/.gitignore_global"

   if git config --list | grep -q "${name}"; then
      echo "git was already configured."
   else
      echo
      read -p "Press enter to configure git..."
      # specify a user
      git config --global user.name "${name}"
      git config --global user.email "${email}"
      # select a text editor
      git config --global core.editor vi
      # add some SVN-like aliases
      git config --global alias.st status
      git config --global alias.co checkout
      git config --global alias.br branch
      git config --global alias.up rebase
      git config --global alias.ci commit
      # set default push and pull behavior to the old method
      git config --global push.default matching
      git config --global pull.default matching
      # create a global .gitignore file
      echo -e "# global list of file types to ignore \
\n# \
\n# text editor temp files \
\n*~ \
\n.DS_Store" > "${ignore}"
      git config --global core.excludesfile "${ignore}"
      echo "git was configured"
      echo
      read -p "Press enter to view the config..."
      git config --list
   fi
}

# purpose: clone repository after fork
# arguments:
#   $1 -> address of upstream repository
#   $2 -> use SSH protocal for git operations?
#   $3 -> location of Repos directory
#   $4 -> GitHub username
function clone_repo()
{
   local upstream_repo="$1"
   local use_ssh=$2
   local repos_dir="$3"
   local github_user="$4"

   if [ -d "${repos_dir}/${upstream_repo}" ]; then
      echo
      echo "${upstream_repo} directory already exists, skipping clone operation..."
   else
      echo
      echo "***IMPORTANT***"
      echo "Before proceeding, make sure to fork keegoid/${upstream_repo}.git"
      echo
      read -p "Press enter to clone ${github_user}/${upstream_repo} at GitHub..."
      if $use_ssh; then
         git clone "git@github.com:${github_user}/${upstream_repo}.git"
      else
         git clone "https://github.com/${github_user}/${upstream_repo}.git"
      fi
   fi

   # change to newly cloned directory
   cd "${upstream_repo}"
   echo "changing directory to $_"
}

# purpose: add remote upstream repository, fetch and merge changes
# arguments:
#   $1 -> address of upstream repository
#   $2 -> use SSH protocal for git operations?
#   $3 -> GitHub username
function merge_upstream_repo()
{
   
   local upstream_repo="keegoid/$1.git"
   local use_ssh=$2
   local github_user="$3"

   if echo "${upstream_repo}" | grep -q "${github_user}"; then
      echo
      echo "upstream doesn't exist, skipping fetch and merge..."
   else
      if git config --list | grep -q "${upstream_repo}"; then
         echo
         echo "upstream repo already configured: ${upstream_repo}"
      else
         echo
         read -p "Press enter to assign upstream repository..."
         if $use_ssh; then
            git remote add upstream "git@github.com:${upstream_repo}" && echo "remote upstream added: git@github.com:${upstream_repo}"
         else
            git remote add upstream "https://github.com/${upstream_repo}" && echo "remote upstream added: https://github.com/${upstream_repo}"
         fi
      fi

      # pull in changes not present in local repository, without modifying local files
      echo
      read -p "Press enter to fetch changes from upstream repository..."
      git fetch upstream
      echo "upstream fetch done"

      # merge any changes fetched into local working files
      echo
      read -p "Press enter to merge changes..."
      git merge upstream/master

      # or combine fetch and merge with:
      #git pull upstream master
   fi
}

# purpose: create a branch for custom changes so master can receive upstream updates
#          upstream changes can then be merged with the branch interactively
# arguments:
#   $1 -> Middleman domain name
function create_branch()
{
   local branch_name="$1"
   
   echo
   read -p "Press enter to create a git branch for your site at ${branch_name}..."
   git checkout -b "${branch_name}"

   # some work and some commits happen
   # some time passes
   #git fetch upstream
   #git rebase upstream/master or git rebase interactive upstream/master

   read -p "Press enter to push changes and set branch upstream in config..."
   git push -u origin "${branch_name}"

   read -p "Press enter to checkout the master branch again..."
   git checkout master

   echo
   echo "above could also be done with:"
   echo "git branch ${branch_name}"
   echo "git push origin ${branch_name}"
   echo "git branch -u origin/${branch_name} ${branch_name}"

   echo
   echo "*************************************************************************"
   echo "* - use ${branch_name} branch to make your own site                                  "
   echo "* - use master branch to keep up with changes from the upstream repo     "
   echo "*************************************************************************"
}

# purpose: commit and push changes with git
# arguments:
#   $1 -> GitHub username
function commit_and_push()
{
   local github_user="$1"

   # print git status
   echo
   read -p "Press enter to view git status..."
   git status

   if git status | grep -qw "Changes not staged for commit:"; then
      # commit changes with git
      echo
      read -p "Press enter to commit changes..."
      git commit -am "first commit by ${github_user}"

      # push commits to your remote repository
      read -p "Press enter to push changes to your remote repository (GitHub)..."
      git push origin master
   else
      echo "skipping commit..."
   fi
}
